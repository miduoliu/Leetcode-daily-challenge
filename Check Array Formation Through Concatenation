/*
You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].

Return true if it is possible to form the array arr from pieces. Otherwise, return false.


Example 1:

Input: arr = [85], pieces = [[85]]
Output: true
Example 2:

Input: arr = [15,88], pieces = [[88],[15]]
Output: true
Explanation: Concatenate [15] then [88]
Example 3:

Input: arr = [49,18,16], pieces = [[16,18,49]]
Output: false
Explanation: Even though the numbers match, we cannot reorder pieces[0].
Example 4:

Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
Output: true
Explanation: Concatenate [91] then [4,64] then [78]
Example 5:

Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]
Output: false
 

Constraints:

1 <= pieces.length <= arr.length <= 100
sum(pieces[i].length) == arr.length
1 <= pieces[i].length <= arr.length
1 <= arr[i], pieces[i][j] <= 100
The integers in arr are distinct.
The integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).*/

class Solution {
public:
    bool canFormArray(vector<int>& arr, vector<vector<int>>& pieces) {
        vector <int> ps(101,-1); // create a vector which is larger than maximum size of piece[i][j];
        for (int i = 0; i < pieces.size(); i++)
            ps[pieces[i][0]] = i;  // store the first number of pieces[i];
        for (int i = 0; i < arr.size(); ) {
            int p = ps[arr[i]], j = 0; // int p as a checking pointer of element in ps; j is traverse pointer.
            if (p == -1) return false; // if ps[arr[i]] not changed then means pieces and arr not match.
            while (j < pieces[p].size())
                if (arr[i++] != pieces[p][j++]) // checking equality from each pieces[p][0] to pieces[p][size - 1]
                    return false;
        }
        return true;
    }
};
// thanks for code of votrubac, help me understand this problem
